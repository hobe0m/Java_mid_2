package generic.ex1;

public class TerminologyAndConvention {
    // 제네릭의 용어(Terminology)와 관례(Convention)

    // 제네릭의 핵심은 사용할 타입을 미리 결정하지 않는다는 점이다.
    // 클래스 내부에서 사용하는 타입을 클래스로 정의하는 시점에 결정하는 것이 아니라 실제 사용하는 생성 시기에 타입을 결정하는 것이다.
    // 이것을 쉽게 비유하자면 메서드의 매개변수와 인자의 관계와 비슷하다.

    // 메서드에 필요한 값을 메서드 정의 시점에 미리 결정
    // void Method1() {
    //     println("print");
    // }

    // 메서드가 필요한 값을 위의 Method1()처럼 정의 시점에 미리 결정하게 되면, 이 메서드는 오직 "hello"라는 값만 출력할 수 있어 재사용성이 떨어진다.

    // 메서드에 필요한 값을 인자를 통해 매개변수로 전달해서 결정
    // void Method2(String param) {
    //     println(param);
    // }

    // 메서드에 필요한 값을 메서드를 정의하는 시점에 미리 결정하지 않고 메서드를 실제 사용하는 시점으로 미룰 수 있다.
    // 메서드에 매개변수(String param)를 지정하고, 메서드를 사용할 때 원하는 값을 인자("hello", "hi")로 전달하면 된다.
    // 따라서 실행 시점에 얼마든지 다른 값을 받아 처리할 수 있으므로 재사용성이 크게 늘어난다.
    
    // 메서드의 매개변수와 인자
    // 제네릭도 앞서 설명한 메서드의 매개변수와 인자의 관계와 비슷하게 작동한다.
    // 제네릭 클래스를 정의할 때 내부에서 사용할 타입을 미리 결정하는 것이 아니라, 해당 클래스를 실제 사용하는 생성 시점에 내부에서 사용할 타입을 결정하는 것이다.
    // 차이가 있다면 메서드의 매개변수는 사용할 값에 대한 결정을 나중으로 미루는 것이고, 제네릭의 타입 매개변수는 사용할 타입에 대한 결정을 나중으로 미루는 것이다.
    //  - 메서드 : 사용할 값, 제네릭 : 사용할 타입

    // 정리하면 다음과 같다.
    //  - 메서드는 매개변수에 인자를 전달해서 사용할 값을 결정한다.
    //  - 제네릭 클래스는 타입 매개변수에 타입 인자를 전달해서 사용할 타입을 결정한다.

    // 제네릭에서 사용하는 용어도 매개변수, 인자의 용어를 그대로 가져다 사용한다.
    //  - 다만 값이 아니라 타입을 결정하는 것이기 때문에 앞에 타입을 붙인다.

    // 타입 매개변수 : GenericBox<T>에서 T
    // 타입 인자 : GenericBox<Integer>에서 <Integer>, GenericBox<String>에서 <String>

    // 용어 정리
    // 제네릭(Generic) 단어
    //  - 제네릭이라는 단어는 일반적인, 범용적인이라는 뜻이다.
    //  - 풀어보면 특정 타입에 속한 것이 아니라 일반적으로, 범용적으로 사용할 수 있다는 뜻이다.

    // 제네릭 타입(Generic Type)
    //  - 클래스나 인터페이스를 정의할 때 타입 매개변수를 사용하는 것을 말한다.
    //  - 제네릭 클래스, 제네릭 인터페이스를 모두 합쳐서 제네릭 타입이라 한다.
    //   - 타입은 클래스, 인터페이스, 기본형(int 등)을 모두 합쳐서 부르는 말이다.
    //   - 예시 : class GenericBox<T> { private T t; }

    // 타입 매개변수(Type Parameter)
    //  - 제네릭 타입이나 메서드에서 사용되는 변수로, 실제 타입으로 대체된다.
    //  - 예시 : GenericBox<T>
    //  - 여기에서 T를 타입 매개변수라 한다.

    // 타입 인자(Type Argument)
    //  - 제네릭 타입을 사용할 때 제공되는 실제 타입이다.
    //  - 예시 : GenericBox<Integer>
    //  - 여기에서 Integer를 타입 인자라 한다.

    // 제네릭 명명 관례
    // 타입 매개변수는 일반적인 변수명처럼 소문자처럼 사용해도 문제는 없다.
    // 하지만 일반적으로 대문자를 사용하고 용도에 맞는 단어의 첫 글자를 사용하는 관례를 따른다.

    // 주요 사용하는 키워드는 다음과 같다.
    //  - E : Element
    //  - K : Key
    //  - N : Number
    //  - T : Type
    //  - V : Value
    //  - S, U, V, etc : 2th, 3rd, 4th types
    //   - S, U, V 외 다른 것들은 임의로 지정해서 사용하는 것이다.

    // 제네릭 기타
    // 다음과 같이 한번에 여러 타입 매개변수를 선언할 수 있다.
    // class Data<K, V> {}

    // 타입 인자로 기본형은 사용할 수 없다.
    // 제네릭의 타입 인자로 기본형(int, double)은 사용할 수 없고 대신에 래퍼 클래스(Integer, Double)를 사용하면 된다.
}
