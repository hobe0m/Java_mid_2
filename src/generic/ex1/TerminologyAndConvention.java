package generic.ex1;

public class TerminologyAndConvention {
    // 제네릭의 용어(Terminology)와 관례(Convention)

    // 제네릭의 핵심은 사용할 타입을 미리 결정하지 않는다는 점이다.
    // 클래스 내부에서 사용하는 타입을 클래스로 정의하는 시점에 결정하는 것이 아니라 실제 사용하는 생성 시기에 타입을 결정하는 것이다.
    // 이것을 쉽게 비유하자면 메서드의 매개변수와 인자의 관계와 비슷하다.

    // 메서드에 필요한 값을 메서드 정의 시점에 미리 결정
    // void Method1() {
    //     println("print");
    // }

    // 메서드가 필요한 값을 위의 Method1()처럼 정의 시점에 미리 결정하게 되면, 이 메서드는 오직 "hello"라는 값만 출력할 수 있어 재사용성이 떨어진다.

    // 메서드에 필요한 값을 인자를 통해 매개변수로 전달해서 결정
    // void Method2(String param) {
    //     println(param);
    // }

    // 메서드에 필요한 값을 메서드를 정의하는 시점에 미리 결정하지 않고 메서드를 실제 사용하는 시점으로 미룰 수 있다.
    // 메서드에 매개변수(String param)를 지정하고, 메서드를 사용할 때 원하는 값을 인자("hello", "hi")로 전달하면 된다.
    // 따라서 실행 시점에 얼마든지 다른 값을 받아 처리할 수 있으므로 재사용성이 크게 늘어난다.
    
    // 메서드의 매개변수와 인자
    // 제네릭도 앞서 설명한 메서드의 매개변수와 인자의 관계와 비슷하게 작동한다.
    // 제네릭 클래스를 정의할 때 내부에서 사용할 타입을 미리 결정하는 것이 아니라, 해당 클래스를 실제 사용하는 생성 시점에 내부에서 사용할 타입을 결정하는 것이다.
    // 차이가 있다면 메서드의 매개변수는 사용할 값에 대한 결정을 나중으로 미루는 것이고, 제네릭의 타입 매개변수는 사용할 타입에 대한 결정을 나중으로 미루는 것이다.
    //  - 메서드 : 사용할 값, 제네릭 : 사용할 타입
}
